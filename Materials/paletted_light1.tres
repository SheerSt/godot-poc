[gd_resource type="ShaderMaterial" load_steps=3 format=3 uid="uid://cr3j4k4iinj7o"]

[ext_resource type="Texture2D" uid="uid://cgm65g428v5dx" path="res://Tiles/tree1.palette.png" id="1_vnmrc"]

[sub_resource type="Shader" id="2"]
code = "// credit to u/MartialArtTetherball
//https://www.reddit.com/r/godot/comments/gz2led/wrote_a_shader_that_maps_a_pixel_art_color/
//https://pastebin.com/bsdEUAgA

// NOTE: if put in a viewport container, light blending doeesn't happen and the palette is applied.
// Can palette the entire screen that way

// Good references:
// https://github.com/ruffiely/windshader_godot/blob/master/Vegetation_Shader.shader

#include "Materials/common.gdshaderinc"

void vertex() {
	
	// 'Wind' shader done by me.
	world_pos = (MODEL_MATRIX * SCREEN_MATRIX * vec4(VERTEX, 1.0, 1.0)).xy;
	vec2 world_pos_adjusted = world_pos + VERTEX;  // Prevents a 'bulge' effect, world_pos is the left side of the tree.
	// Make trees sway from the wind, moving from bottom-left of screen to top-right.
	float scale = 40.0;
	float xy_offset = world_pos_adjusted.x * scale - world_pos_adjusted.y * scale;  
	float x_offset = sin(TIME * 1.0 + xy_offset);
	x_offset *= x_offset - 1.0;  // Makes the -x sway less that +x sway.
	x_offset *= (.06 - UV.y);  // Start sway motion at tile base.
	x_offset *= 10.0;  // En-biggen.
	int rounded = int(x_offset * 10.0);
	x_offset = float(rounded) / 10.0;
	VERTEX.x += x_offset;
}

void fragment() {
	
	vec2 altUV = UV;
	float  xy_offset = world_pos.x / 13.0 * (UV.y * 2.0 - world_pos.y) * PI / 5.0;
	float y_offset = max(sin(TIME + xy_offset), .95);  //  / 2.0
	y_offset -= .95;
	if (int(xy_offset) % 2 == 0) y_offset *= -(abs(NORMAL.x));
	else y_offset *= (NORMAL.x);  // looked good as well.
	y_offset *= (.06 - UV.y);  // decrease effect near bottom.
	y_offset *= .05;
	int rounded = int(y_offset * 40000.0);
	y_offset = float(rounded) / 40000.0;
	altUV.y += y_offset * 8.0;
	
	// Prevent jitter.
	altUV = computeUV(altUV, TEXTURE_PIXEL_SIZE);
	
	// Fixes lines that appear at texture edge.
	// TODO: investigate and make this work for any texture size.
	altUV.x = clamp(altUV.x, 0.0322, .0616);

	vec3 modulate = COLOR.rgb / texture(TEXTURE, UV).rgb;
	COLOR = texture(TEXTURE, altUV);
	
	// Calculate basic output color based on normal normal map image.
	// This has to be done manually in Godot 2D shaders in order for this shader to work.
	vec3 lightDir = vec3(cos(light_angle), sin(light_angle), .8);
	vec3 normal;
	normal.xy = texture(NORMAL_TEXTURE, altUV).xy * vec2(2.0, -2.0) - vec2(1.0, -1.0);
	normal.z = sqrt(1.0 - dot(normal.xy, normal.xy));
	float diff = max(dot(normal, lightDir), 0.0);  // Could usually just pass NORMAL here.
	vec3 diffuse = diff * light_color;
	vec3 c = (ambient_light + diffuse) * COLOR.rgb;

    int index_of_closest;
    float distance_to_closest = 10000.0;

    for (int i = 0; i < int(palette_size); ++i) {
        float d = find_weighted_distance(color_palette[i], c);
        if (d < distance_to_closest) {
            index_of_closest = i;
            distance_to_closest = d;
        }
    }

	// Assign to the nearest color.
	COLOR.rgb = color_palette[index_of_closest].rgb * modulate;
}
"

[resource]
shader = SubResource("2")
shader_parameter/light_angle = 45.0
shader_parameter/ambient_light = Vector3(1, 1, 1)
shader_parameter/light_color = Vector3(1, 1, 1)
shader_parameter/bias = Vector3(1, 0.5, 1)
shader_parameter/smoothing_factor = 1.0
shader_parameter/palette_texture = ExtResource("1_vnmrc")
