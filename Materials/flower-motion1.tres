[gd_resource type="ShaderMaterial" load_steps=3 format=3 uid="uid://dfamh8c1w5n45"]

[ext_resource type="Texture2D" uid="uid://cgm65g428v5dx" path="res://Tiles/tree1.palette.png" id="1_w1e6d"]

[sub_resource type="Shader" id="Shader_uowo4"]
code = "// TODOs:
// Would be nice to keep the pixels from skewing and stay x/y aligned.

#include "Materials/common.gdshaderinc"

void vertex() {
	
	// 'Wind' shader done by me.
	world_pos = (MODEL_MATRIX * SCREEN_MATRIX * vec4(VERTEX, 1.0, 1.0)).xy;
	vec2 world_pos_adjusted = world_pos + VERTEX;  // Prevents the 'bulge' effect, world_pos will be left side of tree.
	float scale = 40.0;
	float xy_offset = world_pos_adjusted.x * scale - world_pos_adjusted.y * scale;  // sway trees from bottom-left to top-right.
	float x_offset = sin(TIME * 1.4 + xy_offset);
	x_offset *= x_offset - 1.0;  // makes -x sway less that +x sway.
	x_offset *= (4.0 - VERTEX.y);
	x_offset *= .08;
	int rounded = int(x_offset * 10.0);
	x_offset = float(rounded) / 10.0;
	VERTEX.x += x_offset;
	
}

void fragment() {
	
	vec2 altUV = UV;
	float  xy_offset = world_pos.x / 13.0 * (UV.y * 2.0 - world_pos.y) * PI / 5.0;
	float y_offset = max(sin(TIME + xy_offset), .95);
	y_offset -= .95;
	y_offset *= -(abs(NORMAL.x));
	y_offset *= (.06 - UV.y);  // decrease effect near bottom.
	y_offset *= .05;
	int rounded = int(y_offset * 40000.0);
	y_offset = float(rounded) / 40000.0;
	altUV.y += y_offset * 8.0;
	
	// Prevent jitter.
	altUV = computeUV(altUV, TEXTURE_PIXEL_SIZE);
	vec3 modulate = COLOR.rgb / texture(TEXTURE, UV).rgb;
	COLOR = texture(TEXTURE, altUV);
	
	vec3 c = COLOR.rgb;
	COLOR.rgb = c * modulate;
}
"

[resource]
shader = SubResource("Shader_uowo4")
shader_parameter/light_angle = 45.0
shader_parameter/ambient_light = Vector3(1, 1, 1)
shader_parameter/light_color = Vector3(1, 1, 1)
shader_parameter/bias = Vector3(1, 0.5, 1)
shader_parameter/smoothing_factor = 1.0
shader_parameter/palette_texture = ExtResource("1_w1e6d")
